<?php

namespace FM\SymSlateBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MessagesImportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessagesImportRepository extends EntityRepository
{
	public function saveMessages($messages_import_id, $messages, $logger = null)
	{
		$em = $this->getEntityManager();
		
		$em->getConnection()->getConfiguration()->setSQLLogger(null);
		
		$mr = $em->getRepository('FMSymSlateBundle:Message');
		$cr = $em->getRepository('FMSymSlateBundle:Classification');
		$sr = $em->getRepository('FMSymSlateBundle:Storage');
		
		$messages_import = $this->findOneById($messages_import_id);

		$q = $em->createQuery('SELECT COUNT(c.id) FROM FMSymSlateBundle:Classification c WHERE c.pack_id=:pack_id');
		$q->setParameter("pack_id", $messages_import->getPackId());
		$position = $q->getSingleScalarResult();

		foreach($messages as $message)
		{
			
			
			$classification_data = $message->classification_data;
			$storage_data = $message->storage_data;
			
			//create the message
			if($tmp = $mr->findOneByMkey($message->getMkey()))
			{
				//just update the type and text if the message is already there
				$tmp->setType($message->getType());
				$tmp->setText($message->getText());
				$message = $tmp;
			}
			else
			{
				$message->setMessagesImport($messages_import);
			}
			
			$em->persist($message);
			
			//create OR UPDATE the classification
			if($classification = $cr->findOneBy(array("pack_id" => $messages_import->getPack()->getId(), "message_id" => $message->getId())))
			{
				
			}
			else
			{
				$classification = new Classification();
				$classification->setMessagesImport($messages_import);
				$classification->setPack($messages_import->getPack());
				$classification->setMessage($message);
				$position += 1;
				$classification->setPosition($position);
			}
			
			$classification->setCategory($classification_data["category"]);
			if(isset($classification_data["section"]))$classification->setSection($classification_data["section"]);
			if(isset($classification_data["subsection"]))$classification->setSubsection($classification_data["subsection"]);
			$em->persist($classification);
			
			//create OR UPDATE the storage
			if($storage = $sr->findOneBy(array("pack_id" => $messages_import->getPack()->getId(), "message_id" => $message->getId())))
			{
				
			}
			else
			{
				$storage = new Storage();
				$storage->setMessagesImport($messages_import);
				$storage->setPack($messages_import->getPack());
				$storage->setMessage($message);
			}
			
			$storage->setMethod($storage_data['method']);
			$storage->setPath($storage_data['path']);
			$storage->setCategory($storage_data['category']);
			$storage->setCustom($storage_data['custom']);
			
			$em->persist($storage);
			
			//if($logger)$logger->info('Size of unit of work: ' . $em->getUnitOfWork()->size());
			
			/*$em->persist($em->merge($messages_import));
			$em->persist($em->merge($messages_import->getPack()));*/
			$em->flush();
			
			$em->clear();
			$messages_import = $this->findOneById($messages_import_id);
			
		}
	}
}
