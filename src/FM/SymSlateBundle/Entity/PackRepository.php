<?php

namespace FM\SymSlateBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query\ResultSetMapping;

/**
 * PackRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PackRepository extends EntityRepository
{
	public function getMessagesWithTranslations($pack_id, $language_id, $query_options = array(), $pagination_options = array())
	{
		$default_query_options = array(
			"empty" => "ONLY", 				// possible values are: ONLY, EXCEPT, anything else is treated as "take empty or non-empty"
			"category" => null,				// all categories
			"section" => null,				// all sections
			"subsection" => null,			// all subsections
			"source_language_id" => null,	// language from which to translate
			"message_like" => null,
			"translation_like" => null
		);
		
		$default_pagination_options = array(
			"page_size" => 25,
			"page" => 1,
			"disable_pagination" => false
		);
		
		$query_options = array_merge($default_query_options, $query_options);
		$pagination_options = array_merge($default_pagination_options, $pagination_options);
		
		if(isset($query_options['source_language_id']))
		{
			if($lang = $this->getEntityManager()->getRepository('FMSymSlateBundle:Language')->findOneById($query_options['source_language_id']))
			{
				if($lang->getCode() == 'en')
				{
					$query_options['source_language_id'] = null;
				}
			}
			else $query_options['source_language_id'] = null;
		}
		
		$qb    = $this->getEntityManager()->createQueryBuilder();
		
		if(!$query_options['source_language_id'])
		{	
			$qb->select(array('DISTINCT c','m','ct','t'));
		}
		else
		{
			$qb->select(array('DISTINCT c','m','ct','t', 'sct', 'st'));
		}
		
		$qb->from('FMSymSlateBundle:Classification','c')
		   ->innerJoin('c.message', 'm')
		   ->leftJoin ('m.current_translations','ct','WITH','ct.language_id = :language_id')
		   ->leftJoin ('ct.translation','t');
			
		if($query_options['source_language_id'])
		{
			$qb->leftJoin ('m.current_translations','sct','WITH','sct.language_id = :source_language_id');
			$qb->leftJoin ('sct.translation','st');		       
		}	
			
		$qb->where('c.pack_id = :pack_id');
			
		if($query_options["empty"] == "ONLY")
		{
			$qb->andWhere('t.id IS NULL');
		}
		else if($query_options["empty"] == "EXCEPT")
		{
			$qb->andWhere('t.id IS NOT NULL');
		}
		
		if($query_options["category"] !== null)
		{
			$qb->andWhere("c.category = :category");
		}
		if($query_options["section"] !== null)
		{
			$qb->andWhere("c.section = :section");
		}
		if($query_options["subsection"] !== null)
		{
			$qb->andWhere("c.subsection = :subsection");
		}
		if(null !== $query_options["message_like"])
		{
			if(null === $query_options['source_language_id'])
			{
				$qb->andWhere("m.text LIKE :message_like");
			}
			else
			{
				$qb->andWhere("st.text LIKE :message_like");
			}
		}
		if($query_options["translation_like"] !== null)
		{
			$qb->andWhere("t.text LIKE :translation_like");
		}

		if(isset($query_options['positions']))
		{
			if((null === $query_options['positions']) or (0 ===  count($query_options['positions'])))
			{
				$qb->andWhere("c.position IS NULL");
			}
			else
			{
				$qb->andWhere("c.position IN (" . implode(", ",array_map('intval', $query_options['positions'])) . ")");
			}
			
		}

		$qb->orderBy('c.position', 'ASC');
		
		$query = $qb->getQuery();
								   
		$query->setParameter('pack_id', $pack_id);
		$query->setParameter('language_id', $language_id);
		
		if($query_options["category"] !== null)
		{
			$query->setParameter('category', $query_options["category"]);
		}
		if($query_options["section"] !== null)
		{
			$query->setParameter('section', $query_options["section"]);
		}
		if($query_options["subsection"] !== null)
		{
			$query->setParameter('subsection', $query_options["subsection"]);
		}
		if($query_options['source_language_id'])
		{
			$query->setParameter('source_language_id', $query_options["source_language_id"]);
		}
		if(null !== $query_options["message_like"])
		{
			$query->setParameter('message_like', $query_options["message_like"]);
		}
		if($query_options["translation_like"] !== null)
		{
			$query->setParameter('translation_like', $query_options["translation_like"]);
		}
		
		
		if(!$pagination_options["disable_pagination"])
		{
			$query->setMaxResults((int)$pagination_options["page_size"]);
			$query->setFirstResult(((int)$pagination_options["page"]-1)*((int)$pagination_options["page_size"]));
		}
		
		$paginator = new Paginator($query, true);

		$messages = array();
		$context_messages = null;
		//get context if there was a LIKE clause
		if((!(isset($query_options["is_context"]) and $query_options["is_context"]) 
			and (   (null !== $query_options["message_like"]) 
				 or (null !== $query_options["translation_like"]) 
				 or ('ONLY' !== $query_options["empty"]) 
				 or ('EXCEPT' !== $query_options["empty"]))
				)
			)
		{
			//get the positions around the selected messages
			$positions = array();
			$already_got = array();
			$context   = 2;
			foreach($paginator as $classification)
			{
				for($p = $classification->getPosition() - $context; $p <= $classification->getPosition() + $context; $p += 1)
				{
					if($p >= 0)
					{
						if($p != $classification->getPosition())
						{
							$positions[] = $p;
						}
						else
						{
							$already_got[] = $p;
						}
					}
				}
			}
			//print_r($positions);
			$positions = array_diff(array_unique($positions), $already_got);

			$qo = array(
				"section" => $query_options["section"],
				"subsection" => $query_options["subsection"],
				"source_language_id" => $query_options['source_language_id'],
				"empty" => null, //empty or not
				"positions" => $positions,
				"message_like" => null,
				"translation_like" => null,
				"is_context" => true
			);

			$po = array("disable_pagination" => true);

			$context_messages = $this->getMessagesWithTranslations($pack_id, $language_id, $qo, $po);
			$messages = $context_messages['messages'];
		}
		
		
			
		if($sid = $query_options['source_language_id'])
		{
			
		}
			
		foreach($paginator as $classification)
		{
			
			$translation = '';
			$text        = null;
			$translation_id = null;
			
			$message = $classification->getMessage();

			$cts     = $message->getCurrentTranslations();

			
			/**
			 * There are 0 - 2 $cts depending on
			 *  -whether we requested a source language translation
			 *  -whether the source and dest language translations were found
			 */

			foreach($cts as $ct)
			{
				//get the translation
				if($ct->getLanguageId() == $language_id)
				{
					$translation    = $ct->getTranslation()->getText();
					$translation_id = $ct->getTranslation()->getId();
				}
				//get the message translation if required
				if(isset($query_options['source_language_id']) and $ct->getLanguageId() == $query_options['source_language_id'])
				{
					$text = $ct->getTranslation()->getText();
				}
			}

			//set the default message text if message translation in source language was not found or not requested
			if(null === $text)$text = $message->getText();
			
			$messages[$classification->getCategory()][$classification->getSection()][$classification->getSubSection()][] = array(
				"text" => $text,
				"translation" => $translation,
				"translation_id" => $translation_id,
				"type" => $message->getType(),
				"classification_id" => $classification->getId(),
				"message_id" => $message->getId(),
				"is_context" => isset($query_options['is_context']) and $query_options['is_context'],
				"position" => $classification->getPosition()
			);
				
				//echo "<p>".$message->getText()."</p>";
		}
		
		ksort($messages);
		foreach($messages as $category => &$ss)
		{
			ksort($ss);
			foreach ($ss as $section => &$ssms) 
			{
				ksort($ssms);
				foreach($ssms as $subsection => &$ms)
				{
					usort($ms, function($a, $b){
						return $a['position'] - $b['position'];
					});
				}
			}
		}

		$pagination = array(
			'total_count' => count($paginator),
			'page' => $pagination_options['page'],
			'page_size' => $pagination_options['page_size'],
			'page_count' => round((int)count($paginator)/(int)$pagination_options['page_size'])
		);
		
		return array('messages' => $messages, 
					 'pagination' => $pagination
					);
		
	}

	public function getStoragesWithTranslations($pack_id, $language_id)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		$qb->select(array('s','m','ct','t'))
		   ->from('FMSymSlateBundle:Storage', 's')
		   ->innerJoin('s.message', 'm')
		   ->innerJoin('m.current_translations', 'ct')
		   ->innerJoin('ct.translation', 't')
		   ->where('s.pack_id = :pack_id')
		   ->andWhere('ct.language_id = :language_id');
		   
		$query = $qb->getQuery();
		$query->setParameter('pack_id', $pack_id);
		$query->setParameter('language_id', $language_id);
		
		return $query->getResult();
		
	}

	public function computeStatistics($pack_id, $language_id)
	{	
		$query = $this->getEntityManager()->createQuery(
		"SELECT c.category, count(c.id) as total, count(ct.id) as translated 
		 FROM FMSymSlateBundle:Classification c 
		 LEFT JOIN c.message m
		 LEFT JOIN m.current_translations ct
		 WITH ct.language_id = :language_id
		 WHERE c.pack_id = :pack_id
		 GROUP BY c.category
		"		
		);
		$query->setParameter(':language_id',$language_id);
		$query->setParameter(':pack_id',$pack_id);
		$results = $query->getResult();
		
		//print_r($results);
		
		$stats = array(null => array('total' => 0, 'translated' => 0, 'percent' => 0));
		$cats  = array(null);
		
		foreach($results as $row)
		{
			$cats[] = $row['category'];
			$stats[$row['category']] = array('total' => (int)$row['total'], 'translated' => (int)$row['translated'], 'percent' => 100 * (int)$row['translated'] / (int)$row['total'] );
			$stats[null]['total'] += (int)$row['total'];
			$stats[null]['translated'] += (int)$row['translated'];
		}
		
		$stats[null]['percent'] = $stats[null]['total'] > 0 ? 100 * $stats[null]['translated'] / $stats[null]['total'] : 0;
		
		return array("categories" => $cats, "statistics" => $stats);
	}

	public function computeAllStatistics($pack_id, $force_refresh=false, $refresh_interval=1)
	{
		$pack = $this->find($pack_id);

		
		if(!$force_refresh and null !== $pack->getStatisticsUpdated())
		{
			$now   = new \DateTime("now");
			$delta = $now->diff($pack->getStatisticsUpdated());
			$minutes = ($delta->days * 24 + $delta->h) * 60 + $delta->i;

			if($minutes < $refresh_interval)
			{
				$result = json_decode($pack->getStatistics(),true);
				//print_r($result);
				return $result;
			}
		}

		$stats = array();
		$cats  = null;
		foreach($this->getEntityManager()->getRepository('FMSymSlateBundle:Language')->findAll() as $language)
		{
			$st   = $this->computeStatistics($pack_id, $language->getId());
			$cats = $st['categories'];
			$stats[$language->getAName()] = array('code' => $language->getCode(), 'statistics' => $st['statistics']);
		}
		$result = array('categories' => $cats, 'statistics' => $stats);

		$pack = $this->find($pack_id);
		$pack->setStatistics(json_encode($result));
		$pack->setStatisticsUpdated(new \DateTime("now"));

		$this->getEntityManager()->persist($pack);
		$this->getEntityManager()->flush();

		return $result;
	}
	
	public function setCurrent($pack_id)
	{
		$this->getEntityManager()->createQuery("UPDATE FMSymSlateBundle:Pack p SET p.is_current = CASE WHEN p.id = :pack_id THEN true ELSE false END")
								 ->setParameter('pack_id',$pack_id)
								 ->getResult();
	    
	}
	
	public function getPackNames()
	{
		$packNames = array();
		foreach($this->findAll() as $pack)
		{
			$packNames[$pack->getId()] = $pack->getFullName();
		}
		return $packNames;
	}

}
