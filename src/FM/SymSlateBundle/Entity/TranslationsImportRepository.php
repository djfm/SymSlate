<?php

namespace FM\SymSlateBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * TranslationsImportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TranslationsImportRepository extends EntityRepository
{
		
	public function getOrCreateLanguage($user, $language_code)
	{	
		if($language = $this->getEntityManager()->getRepository('FMSymSlateBundle:Language')->findOneByCode($language_code))
		{
			return $language;
		}
		else if($user->canCreateLanguages())
		{
			$language = new Language();
			$language->setCode($language_code);
			$this->getEntityManager()->persist($language);
			$this->getEntityManager()->flush();
			return $language;
		}
		else return null;
	}
	
	
	public function saveTranslations($translations_import_id, $logger = null)
	{
		
		$this->getEntityManager()->getConnection()->getConfiguration()->setSQLLogger(null);
		
		$translations_import = $this->findOneById($translations_import_id);
		$user                = $translations_import->getCreator();
		$translations        = $translations_import->buildTranslations();
		
		foreach($translations as $translation)
		{	
			if(($language = $this->getOrCreateLanguage($user, $translation->language_code)) and $user->canTranslateInto($language))
			{
				if($tmp = $this->getEntityManager()->getRepository('FMSymSlateBundle:Translation')->findOneBy(array(
					"mkey" => $translation->getMkey(),
					"language_id" => $language->getId(),
					"text" => $translation->getText()
				)))
				{
					$translation = $tmp;
				}
				else
				{
					$translation->setTranslationsImport($translations_import);
					$translation->setAuthor($user);
					$translation->setLanguage($language);
					$this->getEntityManager()->persist($translation);
					//only actualize for new translations
					$this->getEntityManager()->getRepository('FMSymSlateBundle:CurrentTranslation')->actualizeWith($translation, $logger);
				}
				
				$this->getEntityManager()->flush();
				$this->getEntityManager()->clear();
				$translations_import = $this->findOneById($translations_import_id);
				$user                = $translations_import->getCreator();
			}
		}
	}
}
